version: '2.1'
services:
    db:
        image: mysql:8.0
        command: --default-authentication-plugin=mysql_native_password --expire_logs_days=3 --secure-file-priv="" --local-infile=1
        cap_add:
            - SYS_NICE  # CAP_SYS_NICE, fix error mbind: Operation not permitted
        restart: unless-stopped
        environment:
            - MYSQL_ROOT_HOST=%
            - MYSQL_ROOT_PASSWORD=$MW_DB_INSTALLDB_PASS
            - MYSQL_DATABASE=$MW_DB_NAME
        volumes:
            - ./__initdb:/docker-entrypoint-initdb.d
            - ./_data/mysql:/var/lib/mysql

    web:
        image: ghcr.io/wikiteq/taqasta:1.35.8-20230518-69
        restart: unless-stopped
        extra_hosts:
            - "gateway.docker.internal:host-gateway"
        links:
            - db
            - redis
            - elasticsearch
        command: bash /entrypoint.sh
        environment:
            # DEFINE THIS VARIABLES IN .env FILE
            - MW_NCBI_TAXONOMY_API_KEY
            - MW_RECAPTCHA_SITE_KEY
            - MW_RECAPTCHA_SECRET_KEY
            - MW_ADMIN_USER
            - MW_ADMIN_PASS
            - MW_DB_NAME
            - MW_DB_INSTALLDB_USER=root
            - MW_DB_INSTALLDB_PASS
            - MW_DB_USER=root
            - MW_DB_PASS=$MW_DB_INSTALLDB_PASS
            - MW_SECRET_KEY

#            - XDEBUG_CONFIG=remote_host=0.0.0.0 remote_enable=1 remote_autostart=Off remote_connect_back=On
            - MW_SITE_SERVER=${MW_SITE_SERVER:-https://bugsigdb.org}
            - MW_SITE_NAME=BugSigDB
            - MW_SITE_LANG=en
            - MW_ENABLE_UPLOADS=1
            - MW_USE_INSTANT_COMMONS=0
            - MW_AUTOUPDATE=true
            - MW_MAIN_CACHE_TYPE=CACHE_REDIS
            - MW_LOAD_SKINS=Vector,chameleon
            - MW_DEFAULT_SKIN=chameleon
            - MW_LOAD_EXTENSIONS=GTag,CodeEditor,Nuke,ParserFunctions,ReplaceText,WikiEditor,Interwiki,CodeEditor,Scribunto,SyntaxHighlight_GeSHi,DataTransfer,Variables,PubmedParser,CodeMirror,Loops,MyVariables,Arrays,DisplayTitle,NCBITaxonomyLookup,SemanticExtraSpecialProperties,SemanticResultFormats
            - MW_SEARCH_TYPE=CirrusSearch
            - MW_PROXY_SERVERS=varnish:80
            - MW_CACHE_PURGE_PAUSE=${MW_CACHE_PURGE_PAUSE:-3600}
            - MW_CACHE_PURGE_PAGE=${MW_CACHE_PURGE_PAGE:-Main_Page}
            - MW_ENABLE_SITEMAP_GENERATOR=${MW_ENABLE_SITEMAP_GENERATOR:-true}
            - PHP_MEMORY_LIMIT=2048M
            - MW_JOB_RUNNER_MEMORY_LIMIT=1G
        volumes:
            - ./_data/mediawiki:/mediawiki
            - ./_logs/httpd:/var/log/apache2
            - ./_logs/mediawiki:/var/log/mediawiki
            - ./_settings/:/var/www/mediawiki/w/_settings
            - ./_resources/.htaccess:/var/www/mediawiki/.htaccess
            - ./_resources/favicon.ico:/var/www/mediawiki/favicon.ico
            - ./_resources/logo.png:/var/www/mediawiki/w/logo.png
            - ./_resources/chameleon:/var/www/mediawiki/w/skins/chameleon/custom
            - ./_resources/footer_icons/cuny.png:/var/www/mediawiki/w/cuny.png
            - ./_resources/footer_icons/mw.png:/var/www/mediawiki/w/mw.png
            - ./_resources/footer_icons/smw.png:/var/www/mediawiki/w/smw.png
            - ./_resources/footer_icons/ww.png:/var/www/mediawiki/w/ww.png
            - ./_resources/footer_icons/bioc.png:/var/www/mediawiki/w/bioc.png
            - ./_resources/extensions/DynamicPageList3:/var/www/mediawiki/w/extensions/DynamicPageList3
            - ./_resources/extensions/SubpageWatchlist:/var/www/mediawiki/w/extensions/SubpageWatchlist
            - ./_resources/extensions/SemanticScribunto:/var/www/mediawiki/w/extensions/SemanticScribunto
            - ./_resources/extensions/SemanticDependencyUpdater:/var/www/mediawiki/w/extensions/SemanticDependencyUpdater
            - ./_resources/extensions/PageForms:/var/www/mediawiki/w/extensions/PageForms
            - ./_resources/googlef2273af339547660.html:/var/www/mediawiki/googlef2273af339547660.html
            - ./entrypoint.sh:/entrypoint.sh
            - ./cache_purge.sh:/cache_purge.sh
            - sitemap:/mediawiki/sitemap

    redis:
        image: "redis:alpine"
        restart: unless-stopped
        volumes:
            - ./_data/redis:/data
            - ./_resources/redis.conf:/usr/local/etc/redis/redis.conf

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.8.23
        restart: unless-stopped
        environment:
            - discovery.type=single-node
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
            - cluster.routing.allocation.disk.threshold_enabled=true
            - cluster.routing.allocation.disk.watermark.flood_stage=1gb
            - cluster.routing.allocation.disk.watermark.high=2gb
            - cluster.routing.allocation.disk.watermark.low=3gb
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - ./_data/elasticsearch:/usr/share/elasticsearch/data

    matomo:
        image: matomo
        restart: unless-stopped
        links:
            - db
        ports:
            - "127.0.0.1:8182:80"
        environment:
            - MATOMO_DATABASE_HOST=db
            - MATOMO_DATABASE_DBNAME=matomo
            - MATOMO_DATABASE_USERNAME=root
            - MATOMO_DATABASE_PASSWORD=$MW_DB_INSTALLDB_PASS
        volumes:
            - ./_data/matomo:/var/www/html

    varnish:
        image: pastakhov/varnish:7.0
        restart: unless-stopped
        ports:
            - "${PORT:-127.0.0.1:8081}:80"
        links:
            - web
        tmpfs:
            - /var/lib/varnish:exec
        environment:
            - VARNISH_SIZE=${VARNISH_SIZE:-2G}
            - VARNISH_STORAGE_KIND=file
        volumes:
            - ./_resources/varnish:/etc/varnish/
            - ./_data/varnish:/data


    updateEFO:
        image: python:3.7
        restart: unless-stopped
        environment:
            - MW_BOT_USER
            - MW_BOT_PASSWORD
            # default is 24 hours
            - MW_UPDATE_EFO_PAUSE=${MW_UPDATE_EFO_PAUSE:-86400}
        volumes:
            - ./updateEFO:/updateEFO
            - ./_logs/updateEFO:/var/log/updateEFO
            - ./updateEFO/rotatelogs-compress.sh:/rotatelogs-compress.sh
        entrypoint:
            - /updateEFO/updateEFO.sh

    restic:
        image: ghcr.io/wikiteq/restic-backup-docker:stream
        restart: unless-stopped
        links:
            - db
        environment:
            - MW_DB_USER=root
            - MW_DB_PASS=$MW_DB_INSTALLDB_PASS
            - MW_DB_NAME=$MW_DB_NAME
            - RESTIC_REPOSITORY=${MW_RESTIC_REPOSITORY}
            - RESTIC_PASSWORD=${MW_RESTIC_PASSWORD:-rest1cpassw0rd}
            - RESTIC_TAG=backup_full
            - AWS_ACCESS_KEY_ID=${MW_RESTIC_S3_KEY}
            - AWS_SECRET_ACCESS_KEY=${MW_RESTIC_S3_SECRET}
            - BACKUP_CRON=0 1 * * 6
            - CHECK_CRON=0 23 * * 5
            - RESTIC_FORGET_ARGS=--prune --keep-weekly 1 --keep-monthly 1 --group-by paths
            # pre-backup script
            - RESTIC_PRE_BACKUP=if [ ! -d "/data" ]; then mkdir /data; fi && mysqldump -hdb -u$$MW_DB_USER -p$$MW_DB_PASS $$MW_DB_NAME | gzip -c > /data/database.sql.gz
            # post-backup script
            - RESTIC_POST_BACKUP=rm /data/database.sql.gz
            - RESTIC_STREAM=yes
            - RESTIC_STREAM_CMD=tar -cf - -C /data_mediawiki/ /data/database.sql.gz images
            - RESTIC_STREAM_FILENAME=full.images.database.tar
        volumes:
            # read-only mount of mediawiki data directory for images access
            - ./_data/mediawiki:/data_mediawiki:ro
            # restic repository mount
            - ./_data/restic:/mnt/restic
            # logs
            - ./_logs/restic:/var/log

volumes:
    sitemap:

